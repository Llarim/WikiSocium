div(class="step", id="step_" + step_index + "")
  h2.stepTitle
    #{step.title}
  br
  
  #widgets
    script(type = 'text/javascript')
      var step#{step_index}FieldsList = [];
      var notEmptyStep = false;
    //- If groups are defined, render widgets in them
    - if(typeof(step.widget_groups) != 'undefined')
      - each widget_group in step.widget_groups
        - var groupDivClass = "widgetGroup";
        - if(widget_group.no_group == "true") //-if widgets are meant to be shown outside group (only CSS magic)
          - groupDivClass = "";
        div(class="#{groupDivClass}")
          #{widget_group.title}
          - each widget in widget_group.widgets
            - if (stepData == null)
              - console.log("init")
              - console.log(widget.initial)
              !=partial(widget.widget_type, {widget:widget, step_id:step_index, value:widget.initial})
            - else
              - console.log("Widget " + widget.id + " initialization with data loading");
              !=partial(widget.widget_type, {widget:widget, step_id:step_index, value:stepData[widget.id]})
    - else //- Else render all widgets in one implicit group
      - each widget in step.widgets
        - if (stepData == null)
          - console.log("init")
          - console.log(widget.initial)
          !=partial(widget.widget_type, {widget:widget, step_id:step_index, value:widget.initial})
        - else
          - console.log("Widget " + widget.id + " initialization with data loading");
          !=partial(widget.widget_type, {widget:widget, step_id:step_index, value:stepData[widget.id]})

    script(type = 'text/javascript')
      groups[#{step_index}] = step#{step_index}FieldsList;
    !="<script type = 'text/javascript'>"
    - if(typeof(step.widget_groups) != 'undefined')
      - each widget_group in step.widget_groups
        - each widget in widget_group.widgets
          - if (!(typeof(widget.change_visibility) == "undefined"))
            !="groups[" + step_index + "][\"" + widget.id + "\"].on(\"updated\", function() { var to_change = currentCaseData.ChangeVisibility(" + step_index + ", \"" + widget.id + "\", groups[" + step_index + "][\"" + widget.id + "\"].getValue()); for (var i = 0; i < to_change.length; i ++) { if (to_change[i].show == true) { groups[currentCaseData.GetStepIndexById(to_change[i].step_id)][to_change[i].widget_id].show(); } else if (to_change[i].hide == true) { groups[currentCaseData.GetStepIndexById(to_change[i].step_id)][to_change[i].widget_id].hide(); }}});"
          - if (widget.hidden == true)
            !="groups[" + step_index + "][\"" + widget.id + "\"].hide();"
    - else
      - each widget in step.widgets
        - if (!(typeof(widget.change_visibility) == "undefined"))
          !="groups[" + step_index + "][\"" + widget.id + "\"].on(\"updated\", function() { var to_change = currentCaseData.ChangeVisibility(" + step_index + ", \"" + widget.id + "\", groups[" + step_index + "][\"" + widget.id + "\"].getValue()); for (var i = 0; i < to_change.length; i ++) { if (to_change[i].show == true) { groups[currentCaseData.GetStepIndexById(to_change[i].step_id)][to_change[i].widget_id].show(); } else if (to_change[i].hide == true) { groups[currentCaseData.GetStepIndexById(to_change[i].step_id)][to_change[i].widget_id].hide(); }}});"
        - if (widget.hidden == true)
          !="groups[" + step_index + "][\"" + widget.id + "\"].hide();"
    !="</script>"
