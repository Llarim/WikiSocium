####################
# Лицензия проекта #
####################

####################
# Описание проекта #
####################

############################
# Советы для разработчиков #
############################
В .gitignore_global лучше добавить исключение для node_modules, чтобы не сабмитить на github собранные модули

##############################
# Настройка среды разработки #
##############################
!!!Под Windows не факт, что получится, если не получается - читайте ниже!!!
1. node.js — https://github.com/joyent/node/wiki/Installation
2. npm (node package manager) — http://npmjs.org/doc/README.html

Теперь надо куда-то склонировать репозиторий, перейти в этом где-то в папочку node и установить необходимые пакеты.
Можно попробовать сделать в директории с app.js "npm install -d" (то есть установить все зависимости из package.json), а можно все поставить руками:

3. express.js (является node package'ом) — http://expressjs.com/guide.html, 
4. jade "npm install jade"
5. now.js http://nowjs.com/download, нас интересует "Install From npm", то есть "npm install now"

Так или иначе, все зависимости установлены, можно запускать сервер:
6. Теперь пишем "node app.js" и наблюдаем надпись "Express server listening on port 8080 in development mode"
7. Открываем браузер, пишем localhost:8080, появляется надпись, мол, Express вас приветствует.

!!!Под Windows!!!
Пишут, что под Windows npm то ли не поддерживается, то ли поддерживается, но очень криво. Поэтому придется действовать обходным маневром. Возможно, какие-то движения на самом деле лишние, но в целом...
Итак:
1. Скачать node.exe: http://nodejs.org/dist/v0.5.9/node.exe
2. Скачать все для npm: https://github.com/isaacs/npm

Дальнейшие шаги взяты вот отсюда: http://habrahabr.ru/blogs/nodejs/130904/ , то есть:
3. Поставить Питон 2.7. 
4. Скачать ryppi https://github.com/japj/ryppi
5. Положить в директорию WikiSocium/node экзешник Питона, ryppi.py, node.exe, все необходимое для npm и все необходимое для 
6. Выполнить python ryppi.py install express
6.5 (возможно - потом подменить в папке WikiSocium/node/node_modules/express/bin файл express на взятый отсюда: http://www.kioskotobys.com.ar/express и возможно - потом инсталлировать express еще раз)
7. Выполнить python ryppi.py install jade
8. Выполнить python ryppi.py install now
9. Выполнить node app.js
10. Забить на то, что он ругается на прокси, написать в браузере localhost:8080, и экспресс с вами поздоровается.

ЗЫ. Я не уверена, что это все будет действовать действительно правильно и аналогично варианту, как если бы мы воспользовались npm, но может быть все-таки будет.

#########################
# Что можно посмотреть? #
#########################
Как организуется работа с запросами и передачей json'а в шаблон.
/templates/testCase/
/templates/testCase/0/

#################
# Как работать? #
#################
Git устроен таким образом, чтобы минимизировать интерференцию от чужого кода до момента мерджа. Поэтому нужно делать бранчи. Если вы работаете над какой-то фичей — делайте для нее бранч. О том как это делать — http://book.git-scm.com/3_basic_branching_and_merging.html, http://book.git-scm.com/3_distributed_workflows.html.

Так как все мы будем добавлены как коллабораторы (то есть каждый будет иметь возможность непосредственно пушить свои коммиты в глобальное хранилище, что увеличит скорость разработки), то форки не очень уместны. Но все же, так как в дальнейшем они могут понадобиться, стоит ознакомиться с ними здесь: http://help.github.com/fork-a-repo/. Вкратце, форк — это создание копии проекта, владельцем которого являетесь вы. После того, как вы закоммитили и, что самое главное, запушили в него какие-то изменения, можно сделать pull request "родительскому" проект, который представляет из себя нотификацию: "я тут кой-чего сделал, если вам это надо, можете перенести себе". 

То есть алгоритм таков:
0. создать аккаунт на github
1. сделать watch на проект WikiSocium
2. настроить среду разработки
3. добавить в html_trash папочку со своим ником/именем/номером паспорта и положить туда написанный к данному моменту код
4. сделать commit всего этого (в свой локальный репозиторий)
5. активно пнуть кого-нибудь, кто может добавить вас к проекту, разрешил делать push
6. сделать push своих коммитов (в remote repo), проверить, что изменени стали видны на сайте
7. создать локальный бранч для текущей задачи (git branch MyBranchName), переключиться на него (git checkout MyBranchName) и решить там свою задачу
8. сделать merge (git merge master) master-бранча со своим (чтобы перенести изменения, которые были внесены в master), убедиться, что все ок и ничего не сломалось
9. переключиться на master-бранч, замержить изменения из своего бранча в master
10. сделать push master-бранча

Если при решении текущей задачи возникают какие-то проблемы, то есть смысл поделиться своим бранчом со всеми. Для этого надо сделать push его в проект, после чего все смогут увидеть этот бранч на guthub, склонировать себе и помочь.

##########################################
# Как построить процесс создания версий? #
##########################################
С учетом того, что у нас много народу и много разрозненных фичей, которые хотелось бы когда-нибудь включить в проект, можно поступить следующим образом. Как только будут какого-то рода milestones на обозримое будущее, можно будет выделить содержимое ближайших версий и тут же сделать для них бранчи, и люди, делающие фичи, которые будут включены в будущую версию, но не будут включены в текушую, будут комитить свои изменения в бранч будущей версии. Как только итерация текущей версии завершится, на нее вешается tag с номером версии, изменения мерджатся в бранч следующей версии и все работают уже с ним.