А теперь, господа, самое время писать код!
http://пиши-код-блять.рф/

####################
# Лицензия проекта #
####################

####################
# Описание проекта #
####################

############################
# Советы для разработчиков #
############################
В .gitignore_global лучше добавить исключение для node_modules, чтобы не сабмитить на github собранные модули

##############################
# Настройка среды разработки #
##############################

(обновлено 28.01.2012, имеются в виду *nix системы)
*** Установка Ubuntu в VirtualBox под Windows ***
1. Поставить VirtualBox последней версии (https://www.virtualbox.org/wiki/Downloads)
2. Поставить Extention Pack к ней
3. Скачать образ Ubuntu 11.04 или 11.10 той же битности, что и ваша система. Создать новую виртуальную машину типа Linux + Ubuntu, ОЗУ выбрать 1-2ГБ, далее создать новый жесткий диск расширяемого размера объемом 8ГБ. После установки этот файл займет около 4ГБ
4. После этого iso c Ubuntu подключить как сменный носитель и запустить машину. Загрузка с образа произойдёт автоматически. Установка простая, никаких опций кроме языка выбирать не надо, все стандартно. Попросят ввести пароль, его нужно ввести и не забыть, он нужен при выполнении команд, которые начинаются с sudo.
5. После установки нужно установить дополнения гостевой ОС. Для этого зайти в меню VirtualBox -> Устройства -> Установить дополнения...
На рабочем столе машины появится иконка с диском. Правой кнопкой мыши -> запустить "Открыть с помощью Предложение автозапуска", ввести пароль и ждать.

*** На установленной Ubuntu ***

1. Открыть terminal и выполнить:
sudo apt-get git python build-essential libssl-dev checkinstall
2. Установить последнюю версию node.js:
wget http://nodejs.org/dist/v0.6.7/node-v0.6.7.tar.gz
tar -zxf node-v0.6.7.tar.gz
cd node-v0.6.7
./configure
make
sudo checkinstall
3. Закрыть терминал и открыть снова. Выполнить команду "node -v". Ответ должен быть v0.6.7. Node установлен.
4. Устанавливаем npm, это менеджер пакетов для node. Выполнить команды в терминале:
wget  http://npmjs.org/install.sh
chmod -c +x install.sh
sudo ./install.sh clean=no

5. Клонируем репозиторий git и ставим нужные пакеты:
git clone https://github.com/WikiSocium/WikiSocium.git
cd WikiSocium/node
npm install -d
npm istall async

6. Ставим MongoDB. Открываем новое окно терминала. Нужно выполнить все шаги отсюда: (http://www.mongodb.org/display/DOCS/Quickstart+Unix) до "In a separate terminal, start the shell, which..
7. Опять заходим в терминал, где ставился node, мы должны находиться в папке ~/WikiSocium/node. Выполняем команду node app.js. Должен работать сайт и регистрация с авторизацией.
Должна быть видна надпись "Express server listening on port 3000 in development mode"

!!!Под Windows!!!
Пишут, что под Windows npm то ли не поддерживается, то ли поддерживается, но очень криво. Поэтому придется действовать обходным маневром. Возможно, какие-то движения на самом деле лишние, но в целом...
Итак:
1. Скачать node.exe: http://nodejs.org/dist/v0.5.9/node.exe
2. Скачать все для npm: https://github.com/isaacs/npm

Дальнейшие шаги взяты вот отсюда: http://habrahabr.ru/blogs/nodejs/130904/ , то есть:
3. Поставить Питон 2.7. 
4. Скачать ryppi https://github.com/japj/ryppi
5. Положить в директорию WikiSocium/node экзешник Питона, ryppi.py, node.exe, все необходимое для npm и все необходимое для 
6. Выполнить python ryppi.py install express
6.5 (возможно - потом подменить в папке WikiSocium/node/node_modules/express/bin файл express на взятый отсюда: http://www.kioskotobys.com.ar/express и возможно - потом инсталлировать express еще раз)
7. Выполнить python ryppi.py install jade
8. Выполнить python ryppi.py install now
9. Выполнить node app.js
10. Забить на то, что он ругается на прокси, написать в браузере localhost:3000, и экспресс с вами поздоровается.

ЗЫ. Я не уверена, что это все будет действовать действительно правильно и аналогично варианту, как если бы мы воспользовались npm, но может быть все-таки будет.

#########################
# Что можно посмотреть? #
#########################
На "главной" странице (которая открывается по адресу localhost:port) написано, какие урлы работают.

#################
# Как работать? #
#################
Git устроен таким образом, чтобы минимизировать интерференцию от чужого кода до момента мерджа. Поэтому нужно делать бранчи. Если вы работаете над какой-то фичей — делайте для нее бранч. О том как это делать — http://book.git-scm.com/3_basic_branching_and_merging.html, http://book.git-scm.com/3_distributed_workflows.html.

Так как все мы будем добавлены как коллабораторы (то есть каждый будет иметь возможность непосредственно пушить свои коммиты в глобальное хранилище, что увеличит скорость разработки), то форки не очень уместны. Но все же, так как в дальнейшем они могут понадобиться, стоит ознакомиться с ними здесь: http://help.github.com/fork-a-repo/. Вкратце, форк — это создание копии проекта, владельцем которого являетесь вы. После того, как вы закоммитили и, что самое главное, запушили в него какие-то изменения, можно сделать pull request "родительскому" проект, который представляет из себя нотификацию: "я тут кой-чего сделал, если вам это надо, можете перенести себе". 

То есть алгоритм таков:
0. создать аккаунт на github и настроить ssl по инструкции отсюда: http://help.github.com/linux-set-up-git/
1. сделать watch на проект WikiSocium
2. настроить среду разработки
3. добавить в html_trash папочку со своим ником/именем/номером паспорта и положить туда написанный к данному моменту код
4. сделать commit всего этого (в свой локальный репозиторий)
5. активно пнуть кого-нибудь, кто может добавить вас к проекту, разрешил делать push
6. сделать push своих коммитов (в remote repo), проверить, что изменени стали видны на сайте
7. создать локальный бранч для текущей задачи (git branch MyBranchName), переключиться на него (git checkout MyBranchName) и решить там свою задачу
8. сделать merge (git merge master) master-бранча со своим (чтобы перенести изменения, которые были внесены в master), убедиться, что все ок и ничего не сломалось
9. переключиться на master-бранч, замержить изменения из своего бранча в master
10. сделать push master-бранча

Если при решении текущей задачи возникают какие-то проблемы, то есть смысл поделиться своим бранчом со всеми. Для этого надо сделать push его в проект, после чего все смогут увидеть этот бранч на guthub, склонировать себе и помочь.

##########################################
# Как построить процесс создания версий? #
##########################################
С учетом того, что у нас много народу и много разрозненных фичей, которые хотелось бы когда-нибудь включить в проект, можно поступить следующим образом. Как только будут какого-то рода milestones на обозримое будущее, можно будет выделить содержимое ближайших версий и тут же сделать для них бранчи, и люди, делающие фичи, которые будут включены в будущую версию, но не будут включены в текушую, будут комитить свои изменения в бранч будущей версии. Как только итерация текущей версии завершится, на нее вешается tag с номером версии, изменения мерджатся в бранч следующей версии и все работают уже с ним.